---
grails:
    profile: rest-api
    codegen:
        defaultPackage: it.uspread.core
    spring:
        transactionManagement: false
info:
    app:
        name: '@info.app.name@'
        version: '@info.app.version@'
        grailsVersion: '@info.app.grailsVersion@'
spring:
    groovy:
        template:
            check-template-location: false

---
grails:
    mime:
        disable:
            accept:
                header:
                    userAgents:
                        - Gecko
                        - WebKit
                        - Presto
                        - Trident
        types:
            all: '*/*'
            atom: application/atom+xml
            css: text/css
            csv: text/csv
            form: application/x-www-form-urlencoded
            html:
              - text/html
              - application/xhtml+xml
            js: text/javascript
            json:
              - application/json
              - text/json
            multipartForm: multipart/form-data
            rss: application/rss+xml
            text: text/plain
            hal:
              - application/hal+json
              - application/hal+xml
            xml:
              - text/xml
              - application/xml
    urlmapping:
        cache:
            maxsize: 1000
    controllers:
        defaultScope: singleton
    converters:
        encoding: UTF-8
    views:
        default:
            codec: html
        gsp:
            encoding: UTF-8
            htmlcodec: xml
            codecs:
                expression: html
                scriptlets: html
                taglib: none
                staticparts: none
endpoints:
    jmx:
        unique-names: true
---
hibernate:
    cache:
        queries: false
        use_second_level_cache: true
        use_query_cache: false
        region.factory_class: 'org.hibernate.cache.ehcache.EhCacheRegionFactory'

dataSource:
    pooled: true
    jmxExport: true
    driverClassName: org.h2.Driver
    username: sa
    password:

environments:
    development:
        dataSource:
            dbCreate: create-drop
            url: jdbc:h2:mem:devDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE
    test:
        dataSource:
            dbCreate: update
            url: jdbc:h2:mem:testDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE
        grails:
            gorm:
                failOnError: true
    production:
        dataSource:
            dbCreate: update
            dialect: org.hibernate.dialect.PostgreSQLDialect
            driverClassName: org.postgresql.Driver
            url: jdbc:postgresql://ec2-79-125-120-89.eu-west-1.compute.amazonaws.com:5432/d6sor2co1jj1c
            username: lflnpefbawxnzq
            password: jM5NEY3t0_OXKnrjZlAwup92sk
            properties:
                jmxEnabled: true
                initialSize: 1
                maxActive: 20
                minIdle: 1
                maxIdle: 25
                maxWait: 10000
                maxAge: 600000
                timeBetweenEvictionRunsMillis: 5000
                minEvictableIdleTimeMillis: 60000
                validationQuery: SELECT 1
                validationQueryTimeout: 3
                validationInterval: 15000
                testOnBorrow: true
                testWhileIdle: true
                testOnReturn: false
                jdbcInterceptors: ConnectionState
                defaultTransactionIsolation: 2 # TRANSACTION_READ_COMMITTED

#Spring Security Core plugin config (https://grails-plugins.github.io/grails-spring-security-core/guide/single.html) :
grails:
    plugin:
        springsecurity:
            useBasicAuth: true # Va ajouter basicAuthenticationFilter et basicExceptionTranslationFilter dans les filterchain au bon endroit
            rejectIfNoRule: true
            fii:
                rejectPublicInvocations: true
            basic:
                realmName: uSpreadIt
            userLookup:
                userDomainClassName: it.uspread.core.domain.User
                usernamePropertyName: username
                passwordPropertyName: password
                authoritiesPropertyName: authorities
                enabledPropertyName: enabled
                accountExpiredPropertyName: accountExpired
                accountLockedPropertyName: accountLocked 
                passwordExpiredPropertyName: passwordExpired
                authorityJoinClassName: it.uspread.core.domain.UserRole
            authority:
                className: it.uspread.core.domain.Role
                nameField: authority
            securityConfigType: InterceptUrlMap
            interceptUrlMap:
                - pattern: '/'
                  access: permitAll
                - pattern: '/application/index'
                  access: permitAll
                - pattern: '/application/notFound'
                  access: permitAll
                - pattern: '/application/serverError'
                  access: permitAll
                - pattern: '/errors/_errors'
                  access: permitAll
                - pattern: '/rest/signup'
                  access: permitAll
                - pattern: '/rest/login*'
                  access: isAuthenticated()
                - pattern: '/rest/users/connected'
                  access: isAuthenticated()
                - pattern: '/rest/users/connected/pushtoken'
                  access: hasRole('ROLE_PUBLIC')
                - pattern: '/rest/users/connected/status*'
                  access: hasRole('ROLE_PUBLIC')
                - pattern: '/rest/users/connected/password'
                  access: isAuthenticated()
                - pattern: '/rest/users/topusers'
                  access: isAuthenticated()
                - pattern: '/rest/users*/**'
                  access: hasAnyRole('ROLE_MODERATOR', 'ROLE_ADMINISTRATOR')
                - pattern: '/rest/messages/*/spread'
                  access: hasRole('ROLE_PUBLIC')
                - pattern: '/rest/messages/*/ignore'
                  access: hasRole('ROLE_PUBLIC')
                - pattern: '/rest/messages/*/report*'
                  access: hasRole('ROLE_PUBLIC')
                - pattern: '/rest/messages/reported*'
                  access: hasAnyRole('ROLE_MODERATOR', 'ROLE_ADMINISTRATOR')
                - pattern: '/rest/messages*'
                  access: hasRole('ROLE_PUBLIC')
                - pattern: '/rest/messages/**'
                  access: isAuthenticated()
            filterChain: # Il y a par défaut une liste de filter appliqué qu'on peut référencer avec le mot clé JOINED_FILTERS
                chainMap:
                    - pattern: '/rest/**'
                      filters: 'JOINED_FILTERS,-exceptionTranslationFilter'
                    - pattern:  '/**'
                      filters: 'JOINED_FILTERS,-basicAuthenticationFilter,-basicExceptionTranslationFilter' # Utise l'authentification par formulaire en dehors de l'api REST
            portMapper:
                httpPort: 8080
                httpsPort: 8443
            #secureChannel:
            #    definition:
            #        - pattern: '/rest/**'
            #          access: REQUIRES_SECURE_CHANNEL
            #        - pattern: '/login/**'
            #          access: REQUIRES_SECURE_CHANNEL
            #        - pattern: '/logout/**'
            #          access: REQUIRES_SECURE_CHANNEL
            #        - pattern: '/**'
            #          access: ANY_CHANNEL
